name: Create Release

# This workflow automatically creates GitHub releases when the version file is updated
# It extracts changelog information from README.md (preferred) or CHANGELOG.md (fallback)
# Version information is read from the 'version' file in the repository root

on:
  push:
    branches: [ main ]
    paths:
      - 'version'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version file changed
        id: check
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "^version$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version file has changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version file has not changed"
          fi
      
      - name: Read version
        id: version
        if: steps.check.outputs.changed == 'true'
        run: |
          VERSION=$(cat version | tr -d '\n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version: $VERSION"
      
      - name: Generate changelog
        id: changelog
        if: steps.check.outputs.changed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Extracting changelog for version $VERSION from README.md"
          
          # Try to extract changelog from README.md for the current version
          if [ -f "README.md" ]; then
            # Extract the changelog section for the current version from README.md
            # Look for the version section pattern: ## ðŸŽ¯ Version X.X.X Release
            CHANGELOG=$(awk -v version="$VERSION" '
              BEGIN { found=0; collecting=0; content="" }
              
              # Match the version header pattern
              /^## ðŸŽ¯ Version [0-9]+\.[0-9]+\.[0-9]+ Release/ {
                if ($0 ~ "Version " version " Release") {
                  found=1
                  collecting=1
                  content = content $0 "\n"
                  next
                }
                if (found && collecting) {
                  # Stop collecting when we hit another version section
                  collecting=0
                }
              }
              
              # Collect content until we hit another ## heading (but not ###)
              /^## / && !/^## ðŸŽ¯ Version [0-9]+\.[0-9]+\.[0-9]+ Release/ {
                if (collecting) {
                  collecting=0
                }
              }
              
              # Collect all lines while in the target version section
              collecting && !/^## ðŸŽ¯ Version [0-9]+\.[0-9]+\.[0-9]+ Release/ {
                content = content $0 "\n"
              }
              
              END {
                if (found) {
                  print content
                } else {
                  print ""
                }
              }
            ' README.md)
            
            # If we found content in README.md, use it
            if [ -n "$CHANGELOG" ] && [ "$CHANGELOG" != " " ]; then
              echo "Found changelog in README.md for version $VERSION"
              # Add footer with full changelog link
              FOOTER="\n\n**Full Changelog**: [View all changes](https://github.com/TheInfamousToTo/PiHoleVault/commits/v$VERSION)"
              CHANGELOG="$CHANGELOG$FOOTER"
            else
              echo "No specific changelog found in README.md for version $VERSION, checking CHANGELOG.md"
              
              # Fallback: Try to extract from CHANGELOG.md if it exists
              if [ -f "CHANGELOG.md" ]; then
                CHANGELOG_MD=$(awk -v version="$VERSION" '
                  BEGIN { found=0; collecting=0; content="" }
                  
                  # Match version header in CHANGELOG.md: ## [X.X.X] - YYYY-MM-DD
                  /^## \[/ {
                    if ($0 ~ "\\[" version "\\]") {
                      found=1
                      collecting=1
                      content = content $0 "\n"
                      next
                    }
                    if (found && collecting) {
                      collecting=0
                    }
                  }
                  
                  # Stop at next version section
                  /^## \[/ && collecting {
                    collecting=0
                  }
                  
                  # Collect content while in target version
                  collecting {
                    content = content $0 "\n"
                  }
                  
                  END {
                    if (found) {
                      print content
                    }
                  }
                ' CHANGELOG.md)
                
                if [ -n "$CHANGELOG_MD" ]; then
                  CHANGELOG="## ðŸš€ PiHoleVault v$VERSION\n\n$CHANGELOG_MD\n\n**Full Changelog**: [View all changes](https://github.com/TheInfamousToTo/PiHoleVault/commits/v$VERSION)"
                else
                  # Final fallback: Generic changelog
                  CHANGELOG="## ðŸš€ PiHoleVault v$VERSION\n\nAutomatically generated release from version file update.\n\n### Changes\n- Updated to version $VERSION\n- See commit history for detailed changes\n\n**Full Changelog**: [View all changes](https://github.com/TheInfamousToTo/PiHoleVault/commits/v$VERSION)"
                fi
              else
                # No CHANGELOG.md, use generic
                CHANGELOG="## ðŸš€ PiHoleVault v$VERSION\n\nAutomatically generated release from version file update.\n\n### Changes\n- Updated to version $VERSION\n- See commit history for detailed changes\n\n**Full Changelog**: [View all changes](https://github.com/TheInfamousToTo/PiHoleVault/commits/v$VERSION)"
              fi
            fi
          else
            echo "README.md not found, generating generic changelog"
            CHANGELOG="## ðŸš€ PiHoleVault v$VERSION\n\nAutomatically generated release from version file update.\n\n**Full Changelog**: [View all changes](https://github.com/TheInfamousToTo/PiHoleVault/commits/v$VERSION)"
          fi
          
          # Debug output
          echo "Generated changelog preview:"
          echo "$CHANGELOG" | head -10
          
          # Save changelog to output (GitHub Actions multiline string)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          printf "%b\n" "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Check if tag exists
        id: check-tag
        if: steps.check.outputs.changed == 'true'
        run: |
          TAG_VERSION="${{ steps.version.outputs.tag_version }}"
          if git tag -l | grep -q "^$TAG_VERSION$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG_VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG_VERSION does not exist"
          fi
      
      - name: Create GitHub Release
        if: steps.check.outputs.changed == 'true' && steps.check-tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_version }}
          name: "PiHoleVault ${{ steps.version.outputs.tag_version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
